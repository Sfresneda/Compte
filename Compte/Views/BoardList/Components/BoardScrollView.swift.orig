//
//  BoardScrollView.swift
//  Compte
//
//  Created by likeadeveloper on 21/12/22.
//

import SwiftUI

// MARK: - BoardScrollView
struct BoardScrollView: View {
    // MARK: Vars
    @Binding var items: [CompteObject]
    @Binding var multiSelection: Set<UUID>

    var delete: (UUID) -> Void
    var rename: (CompteObject) -> Void
    var decorator: BoardScrollDecorator = DefaultBoardScrollDecorator()

    private var firstItem: UUID? {
        items.first?.id
    }

    // MARK: Lifecycle
    var body: some View {
        ScrollViewReader { proxy in
            List(selection: $multiSelection) {
                ForEach($items, id: \.id) { item in
                    NavigationLink(destination: ViewBuilderCoordinator
                        .shared
                        .buildTapListView(object: item.wrappedValue )) {
                            BoardListCellView(model: item)
                        }
                        .listRowInsets(decorator.listRowInsets)
                        .listRowSeparator(.hidden)
                        .swipeActions(allowsFullSwipe: true) {
                            Button(role: .destructive) {
                                withAnimation {
                                    delete(item.wrappedValue.id)
                                }
                            } label: {
                                decorator.swipeDeleteActionLabel
                            }
                            .tint(decorator.swipeDeleteTint)

                            Button {
                                withAnimation {
                                    rename(item.wrappedValue)
                                }
                            } label: {
                                decorator.swipeRenameActionLabel
                            }
                            .tint(decorator.swipeRenameTint)
                        }

                }
                .listRowBackground(decorator.listRowBackground)
            }
            .listStyle(.plain)
            .onChange(of: items) { newValue in
                guard let firstId = firstItem else { return }
                withAnimation(.easeIn) {
                    proxy.scrollTo(firstId, anchor: .bottom)
                }
            }
        }
        .background(decorator.backgroundColor)
    }

    func customView() -> some View {
        CellBackground()
    }
}

struct CellBackground: View {
    var body: some View {
        HStack(alignment: .firstTextBaseline) {
            VStack {
                Spacer()
                Text("")
                    .frame(maxWidth: .infinity)
                Spacer()
            }
            .background(Color.fireOrange)
            .frame(maxWidth: 100, maxHeight: .infinity)
            Spacer()
        }
        .frame(maxHeight: .infinity)
    }
}
<<<<<<< Updated upstream
=======

// MARK: - Preview
struct BoardScrollView_Previews: PreviewProvider {
    static var previews: some View {
        var items = Array(repeating: CompteObject.defaultImplementation(), count: 50)
        BoardScrollView(items: .constant(items), multiSelection: .constant([])) { id in
            items.removeAll(where: { $0.id == id })
        } rename: { _ in
            // Silent is gold
        }
    }
}

// MARK: - Preview
struct EDITBoardScrollView_Previews: PreviewProvider {
    static var previews: some View {
        var items = Array(repeating: CompteObject.defaultImplementation(), count: 50)
        NavigationView {
            BoardScrollView(items: .constant(items), multiSelection: .constant(Set(items.reduce([], { $0 + [$1.id]})))) { id in
                items.removeAll(where: { $0.id == id })
            } rename: { _ in
                // Silent is gold
            }
            .toolbar {
                EditButton()
            }
        }
    }
}
>>>>>>> Stashed changes
